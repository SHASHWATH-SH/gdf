{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\n\n// API service for authentication, events and registrations\nexport const api = {\n  // Authentication\n  login: async (email, password) => {\n    const res = await fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!res.ok) throw await res.json();\n    return res.json();\n  },\n  register: async (email, password, name, department, usn) => {\n    const response = await fetch(`${API_BASE_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        name,\n        department,\n        usn\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Registration failed');\n    }\n    return response.json();\n  },\n  // Events\n  getEvents: async () => {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) throw new Error('Failed to fetch events');\n    return response.json();\n  },\n  createEvent: async eventData => {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) throw new Error('Failed to create event');\n    return response.json();\n  },\n  updateEvent: async (id, eventData) => {\n    console.log('API: Updating event', id, 'with data:', eventData);\n    const response = await fetch(`${API_BASE_URL}/events/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    console.log('API: Update response status:', response.status);\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('API: Update failed:', error);\n      throw new Error('Failed to update event');\n    }\n    const result = await response.json();\n    console.log('API: Update successful:', result);\n    return result;\n  },\n  deleteEvent: async id => {\n    const response = await fetch(`${API_BASE_URL}/events/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete event');\n    return response.json();\n  },\n  // Registrations\n  getRegistrations: async eventId => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/registrations`);\n    if (!response.ok) throw new Error('Failed to fetch registrations');\n    return response.json();\n  },\n  registerStudent: async (eventId, studentData) => {\n    console.log('API: Making registration request to:', `${API_BASE_URL}/events/${eventId}/register`);\n    console.log('API: Request body:', studentData);\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(studentData)\n    });\n    console.log('API: Response status:', response.status);\n    console.log('API: Response ok:', response.ok);\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('API: Registration failed:', error);\n      throw error;\n    }\n    const result = await response.json();\n    console.log('API: Registration successful:', result);\n    return result;\n  },\n  unregisterStudent: async (eventId, email) => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/unregister`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (!response.ok) throw new Error('Failed to unregister student');\n    return response.json();\n  },\n  checkRegistration: async (eventId, email) => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/check-registration?email=${encodeURIComponent(email)}`);\n    if (!response.ok) throw new Error('Failed to check registration');\n    return response.json();\n  },\n  getStudentRegistrations: async email => {\n    const response = await fetch(`${API_BASE_URL}/student/${encodeURIComponent(email)}/registrations`);\n    if (!response.ok) throw new Error('Failed to get student registrations');\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_BASE_URL","api","login","email","password","res","fetch","method","headers","body","JSON","stringify","ok","json","register","name","department","usn","response","error","Error","getEvents","createEvent","eventData","updateEvent","id","console","log","status","result","deleteEvent","getRegistrations","eventId","registerStudent","studentData","unregisterStudent","checkRegistration","encodeURIComponent","getStudentRegistrations"],"sources":["E:/gdg-project/frontend/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\n\n// API service for authentication, events and registrations\nexport const api = {\n  // Authentication\n  login: async (email: string, password: string) => {\n    const res = await fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n    if (!res.ok) throw await res.json();\n    return res.json();\n  },\n\n  register: async (email: string, password: string, name: string, department: string, usn: string) => {\n    const response = await fetch(`${API_BASE_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password, name, department, usn }),\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Registration failed');\n    }\n    return response.json();\n  },\n\n  // Events\n  getEvents: async () => {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) throw new Error('Failed to fetch events');\n    return response.json();\n  },\n\n  createEvent: async (eventData: { title: string; description: string; date: string; location: string }) => {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(eventData),\n    });\n    if (!response.ok) throw new Error('Failed to create event');\n    return response.json();\n  },\n\n  updateEvent: async (id: number, eventData: any) => {\n    console.log('API: Updating event', id, 'with data:', eventData);\n    \n    const response = await fetch(`${API_BASE_URL}/events/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(eventData),\n    });\n    \n    console.log('API: Update response status:', response.status);\n    \n    if (!response.ok) {\n      const error = await response.json();\n      console.error('API: Update failed:', error);\n      throw new Error('Failed to update event');\n    }\n    \n    const result = await response.json();\n    console.log('API: Update successful:', result);\n    return result;\n  },\n\n  deleteEvent: async (id: number) => {\n    const response = await fetch(`${API_BASE_URL}/events/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error('Failed to delete event');\n    return response.json();\n  },\n\n  // Registrations\n  getRegistrations: async (eventId: number) => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/registrations`);\n    if (!response.ok) throw new Error('Failed to fetch registrations');\n    return response.json();\n  },\n\n  registerStudent: async (eventId: number, studentData: { name: string; department: string; usn: string; email: string }) => {\n    console.log('API: Making registration request to:', `${API_BASE_URL}/events/${eventId}/register`);\n    console.log('API: Request body:', studentData);\n    \n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(studentData),\n    });\n    \n    console.log('API: Response status:', response.status);\n    console.log('API: Response ok:', response.ok);\n    \n    if (!response.ok) {\n      const error = await response.json();\n      console.error('API: Registration failed:', error);\n      throw error;\n    }\n    \n    const result = await response.json();\n    console.log('API: Registration successful:', result);\n    return result;\n  },\n\n  unregisterStudent: async (eventId: number, email: string) => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/unregister`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n    if (!response.ok) throw new Error('Failed to unregister student');\n    return response.json();\n  },\n\n  checkRegistration: async (eventId: number, email: string) => {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}/check-registration?email=${encodeURIComponent(email)}`);\n    if (!response.ok) throw new Error('Failed to check registration');\n    return response.json();\n  },\n\n  getStudentRegistrations: async (email: string) => {\n    const response = await fetch(`${API_BASE_URL}/student/${encodeURIComponent(email)}/registrations`);\n    if (!response.ok) throw new Error('Failed to get student registrations');\n    return response.json();\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}